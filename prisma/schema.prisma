generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model category {
  idcategory      Int     @id @default(autoincrement())
  nome            String  @unique(map: "nome_UNIQUE") @db.VarChar(45)
  required_fields String? @db.LongText
  post            post[]
}

model comment {
  idcomment     Int         @id @default(autoincrement()) @db.UnsignedInt
  user_iduser   Int         @db.UnsignedInt
  post_idpost   Int         @db.UnsignedInt
  post_share_id Int?        @db.UnsignedInt
  comment       String      @db.Text
  time          DateTime?   @db.DateTime(0)
  deleted       Boolean?    @default(false)
  deleted_at    DateTime?   @db.DateTime(0)
  updated_at    DateTime?   @db.DateTime(0)
  post_share    post_share? @relation(fields: [post_share_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_comment_post_share")
  post          post        @relation(fields: [post_idpost], references: [idpost], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_post_post2")
  user          user        @relation(fields: [user_iduser], references: [iduser], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_post_user2")

  @@index([post_idpost], map: "fk_user_has_post_post2_idx")
  @@index([user_iduser], map: "fk_user_has_post_user2_idx")
  @@index([post_share_id], map: "idx_comment_post_share")
}

model image {
  idimage     Int     @id @unique(map: "idimage_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  image       String? @db.VarChar(255)
  post_idpost Int     @db.UnsignedInt
  post        post    @relation(fields: [post_idpost], references: [idpost], onDelete: NoAction, onUpdate: NoAction, map: "fk_image_post1")

  @@index([post_idpost], map: "fk_image_post1_idx")
}

model post {
  idpost                Int                @id @unique(map: "idpost_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  content               String             @db.Text
  user_iduser           Int                @db.UnsignedInt
  categoria_idcategoria Int
  time                  DateTime           @db.DateTime(0)
  metadata              String?            @db.LongText
  deleted               Boolean?           @default(false)
  deleted_at            DateTime?          @db.DateTime(0)
  comment               comment[]
  event_attendance      event_attendance[]
  image                 image[]
  category              category           @relation(fields: [categoria_idcategoria], references: [idcategory], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_categoria1")
  user                  user               @relation(fields: [user_iduser], references: [iduser], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_user")
  post_share            post_share[]
  user_like             user_like[]

  @@index([categoria_idcategoria], map: "fk_post_categoria1_idx")
  @@index([user_iduser], map: "fk_post_user_idx")
}

model user {
  iduser                      Int                @id @unique(map: "iduser_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name                        String             @db.VarChar(45)
  e_mail                      String             @unique(map: "e_mail") @db.VarChar(60)
  passwordHash                String             @db.VarChar(255)
  fone                        String?            @unique(map: "unique_fone") @db.VarChar(12)
  createdAt                   DateTime           @default(now()) @db.DateTime(0)
  updatedAt                   DateTime           @default(now()) @db.DateTime(0)
  passwordResetToken          String?            @db.VarChar(255)
  passwordResetTokenExpiresAt DateTime?          @db.DateTime(0)
  comment                     comment[]
  event_attendance            event_attendance[]
  post                        post[]
  post_share                  post_share[]
  user_like                   user_like[]
  user_profile                user_profile?
}

model user_like {
  id            Int         @id @default(autoincrement()) @db.UnsignedInt
  user_iduser   Int         @db.UnsignedInt
  post_idpost   Int         @db.UnsignedInt
  post_share_id Int?        @db.UnsignedInt
  post          post        @relation(fields: [post_idpost], references: [idpost], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_post_post1")
  post_share    post_share? @relation(fields: [post_share_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_like_post_share")
  user          user        @relation(fields: [user_iduser], references: [iduser], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_post_user1")

  @@unique([user_iduser, post_idpost, post_share_id], map: "uniq_like_post")
  @@index([post_idpost], map: "fk_post_idx")
  @@index([post_share_id], map: "fk_post_share_idx")
  @@index([user_iduser], map: "fk_user_idx")
}

model event_attendance {
  id            Int                     @id @default(autoincrement()) @db.UnsignedInt
  user_iduser   Int                     @db.UnsignedInt
  post_idpost   Int                     @db.UnsignedInt
  post_share_id Int?                    @db.UnsignedInt
  status        event_attendance_status @default(confirmed)
  created_at    DateTime                @default(now()) @db.DateTime(0)
  post          post                    @relation(fields: [post_idpost], references: [idpost], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_post")
  post_share    post_share?             @relation(fields: [post_share_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_share")
  user          user                    @relation(fields: [user_iduser], references: [iduser], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_user")

  @@unique([user_iduser, post_idpost, post_share_id], map: "uniq_event_attendance")
  @@index([post_idpost], map: "fk_event_post_idx")
  @@index([post_share_id], map: "fk_event_share_idx")
}

model post_share {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  user_iduser      Int                @db.UnsignedInt
  post_idpost      Int                @db.UnsignedInt
  shared_at        DateTime?          @default(now()) @db.DateTime(0)
  message          String?            @db.VarChar(500)
  deleted          Boolean?           @default(false)
  deleted_at       DateTime?          @db.DateTime(0)
  comment          comment[]
  event_attendance event_attendance[]
  post             post               @relation(fields: [post_idpost], references: [idpost], onUpdate: Restrict, map: "fk_share_post")
  user             user               @relation(fields: [user_iduser], references: [iduser], onUpdate: Restrict, map: "fk_share_user")
  user_like        user_like[]

  @@index([post_idpost], map: "fk_share_post_idx")
  @@index([user_iduser], map: "fk_share_user")
}

model user_profile {
  id            Int                       @id @default(autoincrement()) @db.UnsignedInt
  user_id       Int                       @unique(map: "user_id") @db.UnsignedInt
  profile_type  user_profile_profile_type
  profile_photo String?                   @db.VarChar(255)
  bio           String?                   @db.Text
  city          String?                   @db.VarChar(100)
  state         String?                   @db.VarChar(100)
  created_at    DateTime                  @default(now()) @db.DateTime(0)
  updated_at    DateTime                  @default(now()) @db.DateTime(0)
  user          user                      @relation(fields: [user_id], references: [iduser], onDelete: Cascade, map: "fk_user_profile_user")
}

enum user_profile_profile_type {
  psr
  volunteer
  ong
  company
  public_institution
}

enum event_attendance_status {
  confirmed
}
